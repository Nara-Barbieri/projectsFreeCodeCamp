/*Rules to allow viewing the size behavior of elements according to the box-sizing property.
	.gallery {
 		 border: 5px solid red;
 		 width: 50%;
	}
	img {
 		 width: 100%;
  		border: 5px solid blue;
  		padding: 5px;
	}
Solutions: 
(Default) content-box model. When an element has a specific width, that width is calculated based only on the element's content. Padding and border values get added to the total width, so the element grows to accommodate these values.
	* {
  		box-sizing: content-box;
	}
(Alternative and best practice) border-box  model. The total width of the element, including padding and border, will be the explicit width set. The content of the element will shrink to make room for the padding and border.
	* {
  		box-sizing: border-box;
	}
*/

/* [*] is the universal selector */
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: sans-serif;
  background: #f5f6f7;
}

.header {
  text-align: center;
  text-transform: uppercase;
  padding: 32px;
  background-color: #0a0a23;
  color: #fff;
  border-bottom: 4px solid #fdb347;
}

.gallery {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  gap: 16px;
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px 10px;
}
/* Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.

[43] display: flex. 
	This will make the element a flex container. Any direct children of a flex container are called flex items.
[44] flex-direction: row;
	Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:
	row (default): horizontal axis with flex items from left to right
	row-reverse: horizontal axis with flex items from right to left
	column: vertical axis with flex items from top to bottom
	column-reverse: vertical axis with flex items from bottom to top
[45] flex-wrap: wrap;
	Determines how your flex items behave when the flex container is too small. 
	wrap: will allow the items to wrap to the next row or column. 
	nowrap (default): will prevent your items from wrapping and shrink them if needed.
[46] justify-content: center;
	Determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.
[47] align-items: center;
	Positions the flex content along the cross axis. 
		In this case, with your flex-direction set to row, your cross axis would be vertical.
[48] gap: 16px;
	Gaps, also knowns as gutters, sets the space between rows and columns. The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout. You apply the property to the container element.
*/

/* The descendant selector matches all elements that are descendants of a specified element.
The following example selects all <img> elements inside elements of class .gallery: */
.gallery img {
  width: 100%;
  max-width: 350px;
  height: 300px;
  object-fit: cover;
  border-radius: 10px;
}
/* Flex items rule.
[82] object-fit: cover;
	Determine how images should behave.
		cover value will tell the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit. */

.gallery::after {
  content: "";
  width: 350px;
}
/* The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in the center because you set justify-content: center on the flex container. */